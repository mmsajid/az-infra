
name: 'Infra'

on:
  push:
    branches: [ "main" ]
  pull_request:

  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    
    
    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: Log in with Azure
      uses: azure/login@v2
      with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          client_secret: ${{ secrets.AZURE_CLIENT_SECRET }}

    - name: 'Setup Terraform'
      uses: hashicorp/setup-terraform@v1

    - name: 'Run az commands'
      run: |
        az account show
        az group list
      
    # - name: Export
    #   run: |
    #     export ARM_CLIENT_ID=${{ secrets.CLIENT_ID }}
    #     export ARM_CLIENT_SECRET=${{ secrets.CLIENT_SECRET }}
    #     export ARM_TENANT_ID=${{ secrets.SUBSCRIPTION_ID }}
    #     export ARM_SUBSCRIPTION_ID=${{ secrets.TENANT_ID }}
          
    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init

    # Checks that all Terraform configuration files adhere to a canonical format
    - name: Terraform Format
      run: terraform fmt -check

    # # Generates an execution plan for Terraform
    # - name: Terraform Plan
    #   run: terraform plan -input=false

      # On push to "main", build or change infrastructure according to Terraform configuration files
      # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
    - name: Terraform Apply
      #if: github.ref == 'refs/heads/"main"' && github.event_name == 'push'
      run: terraform apply -auto-approve -input=false
